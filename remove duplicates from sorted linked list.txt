
//function to remove duplicates from a sorted linked list
//Traverse the list from the head (or start) node. 
//While traversing, compare each node with its next node.
// If data of next node is same as current node then delete 
//the next node. Before we delete a node, we need to store 
//next pointer of the node

void removeDuplicates(Node* head)  
{  
    /* Pointer to traverse the linked list */
    Node* current = head;  
  
    /* Pointer to store the next pointer of a node to be deleted*/
    Node* next_next;  
      
    /* do nothing if the list is empty */
    if (current == NULL)  
    return;  
  
    /* Traverse the list till last node */
    while (current->next != NULL)  
    {  
    /* Compare current node with next node */
    if (current->data == current->next->data)  
    {  
        /* The sequence of steps is important*/        
        next_next = current->next->next;  
        free(current->next);  
        current->next = next_next;  
    }  
    else /* This is tricky: only advance if no deletion */
    {  
        current = current->next;  
    }  
    }  
}  