Given a value N, if we want to make change for N cents, and we have 
infinite supply of each of S = { S1, S2, .. , Sm} valued coins, how many ways can we make the change? The order of coins doesnâ€™t matter.

For example, for N = 4 and S = {1,2,3}, there are four solutions: 
{1,1,1,1},{1,1,2},{2,2},{1,3}. So output should be 4. For N = 10 and S = {2, 5, 3, 6}, 
there are five solutions: {2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} and {5,5}. 
So the output should be 5.

RECURSIVE APPROACH  ---------------KNPASACK KI TRAH SOCHO

int count( int S[], int m, int n ) ////////////////////////////////////M IS NO OF COINS-N IS THE SUM WE WANT-SO RETURN TOTAL NUMBER OF WAYS************************
{ 
    // If n is 0 then there is 1 solution  
    // (do not include any coin) 
    if (n == 0) //NULL SUSBSET YAHAN SUM 0 CHAHIYE HH TO POSSIBLE HH
        return 1; 
      
    // If n is less than 0 then no  
    // solution exists 
    if (n < 0) AGR SUM LESS THAN 0 NOT POSSIBLE 
        return 0; 
  
    // If there are no coins and n  
    // is greater than 0, then no 
    // solution exist 
    if (m <=0 && n >= 1) AGR COINS NA HON TO SUM KHAN SE BNAYENGE 
        return 0; 
  
    // count is sum of solutions (i)  
    // including S[m-1] (ii) excluding S[m-1] 
    return count( S, m - 1, n )///JB LAST KO INCLUDE NA KRENGE  + count( S, m, n-S[m-1] )////JB LAST KO INCLUDE KRENGE SUM ; 
} 


DP APPROACH 

      class Solution {
public:
    int coinChange(vector<int>& coins, int a) {
        int n=coins.size();
        int dp[n+1][a+1];//declare array with the changing variable(n and sum)
        for(int i=0;i<a+1;i++){
            dp[0][i]=INT_MAX-1;//as we cant create sum with zero coins
        }
        for(int i=0;i<n+1;i++){
            dp[i][0]=0;//we cant create with zero sum
        }
        for(int i=1;i<n+1;i++){
            for(int j=1;j<a+1;j++){
                if(coins[i-1]<=j){
                    dp[i][j]=min(dp[i][j-coins[i-1]]+1,dp[i-1][j]);
                    //minof(if coin included, not included) here dp[i][j] denoted considering same coin again whereas dp[i-1][j] means consider next coin!
                }
                else{
                    dp[i][j]=dp[i-1][j];//coin not included so move ahead
                }
            }
        }
        return dp[n][a]==INT_MAX-1?-1:dp[n][a];
    }
};
