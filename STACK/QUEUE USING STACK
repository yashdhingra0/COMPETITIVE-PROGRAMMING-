1.PHEHLA IDEA KI 2 STACK LO S1 AND S2, SI KE SAARE ELEMENT S2 MM DAALO JB TK KHALI NA HOJAYE  AND NYA ELEMENT S1 MM DAALO FIR SAARE ELEMENT OF 2 WAPIS SE S1 MM DAALO TAAKI SBSE PURANA
ELEMENT UPR RHE TAAKI JB HMM DEQUEU KREEN TO ONLY S.TOP () OPERATION USE KRKE I SBH ARAM SE HOJAYE
2. DUSRA IDEA KI S1 STACK MM PUSH KRTA JA KOI BHI KRNA HH TO AND DEQUE KE TIME CHECK KR AGR DONO STACK EMEPTY HH TON KHALI WALI CONDITION NHI TO JB TK S1 EMPTY NHI HOTI SAARE ELEMTS 
S2 MM DALTE JAA AND S2 KA TOP ELEMENT POP KRWA DE VHI DEQUE OPERATION HOGA
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
1.// CPP program to implement Queue using 
// two stacks with costly enQueue() 
#include <bits/stdc++.h> 
using namespace std; 

struct Queue { 
	stack<int> s1, s2; 

	void enQueue(int x) 
	{ 
		// Move all elements from s1 to s2 
		while (!s1.empty()) { 
			s2.push(s1.top()); 
			s1.pop(); 
		} 

		// Push item into s1 
		s1.push(x); 

		// Push everything back to s1 
		while (!s2.empty()) { 
			s1.push(s2.top()); 
			s2.pop(); 
		} 
	} 

	// Dequeue an item from the queue 
	int deQueue() 
	{ 
		// if first stack is empty 
		if (s1.empty()) { 
			cout << "Q is Empty"; 
			exit(0); 
		} 

		// Return top of s1 
		int x = s1.top(); 
		s1.pop(); 
		return x; 
	} 
}; 

// Driver code 
int main() 
{ 
	Queue q; 
	q.enQueue(1); 
	q.enQueue(2); 
	q.enQueue(3); 

	cout << q.deQueue() << '\n'; 
	cout << q.deQueue() << '\n'; 
	cout << q.deQueue() << '\n'; 

	return 0; 
} 
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

2.
// CPP program to implement Queue using 
// two stacks with costly deQueue() 
#include <bits/stdc++.h> 
using namespace std; 

struct Queue { 
	stack<int> s1, s2; 

	// Enqueue an item to the queue 
	void enQueue(int x) 
	{ 
		// Push item into the first stack 
		s1.push(x); 
	} 

	// Dequeue an item from the queue 
	int deQueue() 
	{ 
		// if both stacks are empty 
		if (s1.empty() && s2.empty()) { 
			cout << "Q is empty"; 
			exit(0); 
		} 

		// if s2 is empty, move 
		// elements from s1 
		if (s2.empty()) { 
			while (!s1.empty()) { 
				s2.push(s1.top()); 
				s1.pop(); 
			} 
		} 

		// return the top item from s2 
		int x = s2.top(); 
		s2.pop(); 
		return x; 
	} 
}; 

// Driver code 
int main() 
{ 
	Queue q; 
	q.enQueue(1); 
	q.enQueue(2); 
	q.enQueue(3); 

	cout << q.deQueue() << '\n'; 
	cout << q.deQueue() << '\n'; 
	cout << q.deQueue() << '\n'; 

	return 0; 
} 
