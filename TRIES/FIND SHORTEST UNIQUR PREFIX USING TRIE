Given an array of words, find all shortest unique prefixes to represent each word in the given array. Assume that no word is prefix of another.

Examples:

Input: arr[] = {"zebra", "dog", "duck", "dove"}
Output: dog, dov, du, z
Explanation: dog => dog
             dove = dov 
             duck = du
             z   => zebra 

Input: arr[] =  {"geeksgeeks", "geeksquiz", "geeksforgeeks"};
Output: geeksf, geeksg, geeksq}

USING TRIE

#define MAX 256 
  
// Maximum length of an input word 
#define MAX_WORD_LEN 500 
  
// Trie Node. 
struct trieNode 
{ 
    struct trieNode *child[MAX]; 
    int freq;  // To store frequency 
}; 
  
// Function to create a new trie node. 
struct trieNode *newTrieNode(void) 
{ 
    struct trieNode *newNode = new trieNode; 
    newNode->freq   = 1; 
    for (int i = 0; i<MAX; i++) 
        newNode->next[i] = NULL; 
    return newNode; 
} 
 

void insert(,node* root,string &s)
{  
    node* head=root;
    int n=s.size(); 
    for(int i=0;i<n;i++)
    {
        if(head->next[s[i]-'a']==NULL)
        {           
            head->next[s[i]-'a']=newtrienode();
            head=head->next[s[i]-'a'];
            (head->cnt)++;
        }
        else
        {
            head=head->next[s[i]-'a'];
            (head->cnt)++;
        }
    }
}
  
// This function prints unique prefix for every word stored 
// in Trie. Prefixes one by one are stored in prefix[]. 
// 'ind' is current index of prefix[] 
void findPrefixesUtil(struct trieNode *root, char prefix[], 
                      int ind) 
{ 
    // Corner case 
    if (root == NULL) 
       return; 
  
    // Base case 
    if (root->freq == 1) 
    { 
       prefix[ind] = '\0'; 
       cout << prefix << " "; 
       return; 
    } 
  
    for (int i=0; i<MAX; i++) 
    { 
       if (root->next[i] != NULL) 
       { 
           prefix[ind] = i; 
           findPrefixesUtil(root->child[i], prefix, ind+1); 
       } 
    } 
} 
  
// Function to print all prefixes that uniquely represent all words in arr[0..n-1] 
void findPrefixes(string arr[], int n) 
{ 
    // Construct a Trie of all words 
    struct trieNode *root = newTrieNode(); 
    root->freq = 0; 
    for (int i = 0; i<n; i++) 
        insert(root, arr[i]); 
  
    // Create an array to store all prefixes 
    char prefix[MAX_WORD_LEN]; 
  
    // Print all prefixes using Trie Traversal 
    findPrefixesUtil(root, prefix, 0); 
} 
  
