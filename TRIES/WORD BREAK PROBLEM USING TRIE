// A Trie based program to test whether  a given string can be segmented into  space separated words in dictionary 
EXAMPLE 
Consider the following dictionary 
{ i, like, sam, sung, samsung, mobile, ice, 
  cream, icecream, man, go, mango}

Input:  ilike
Output: Yes 
The string can be segmented as "i like".

Input:  ilikesamsung
Output: Yes
The string can be segmented as "i like samsung" or 
"i like sam sung".


using recursion

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

// Function to segment given string into a space-separated
// sequence of one or more dictionary words
void wordBreak(vector<string> const &dict, string str, string out)
{
	// if we have reached the end of the string,
	// print the output string

	if (str.size() == 0)
	{
		cout << out << endl;
		return;
	}

	for (int i = 1; i <= str.size(); i++)
	{
		// consider all prefixes of current string
		string prefix = str.substr(0, i);

		// if the prefix is present in the dictionary, add prefix to the
		// output string and recur for remaining string

		if (find(dict.begin(), dict.end(), prefix) != dict.end())
			wordBreak(dict, str.substr(i), out + " " + prefix);
	}
}

// Word Break Problem
int main()
{
	// vector of strings to represent dictionary
	// we can also use trie or std::set to store dictionary

	vector<string> dict = { "this", "th", "is", "famous", "Word", "break",
			"b", "r", "e", "a", "k", "br", "bre", "brea", "ak", "problem" };

	// input string
	string str = "Wordbreakproblem";

	wordBreak(dict, str, "");

	return 0;
}

|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||


const int ALPHABET_SIZE = 26;  
struct TrieNode 
{ 
	struct TrieNode *children[ALPHABET_SIZE];  
	bool isEndOfWord; 
}; 

// Returns new trie node (initialized to NULLs) 
struct TrieNode *getNode(void) 
{ 
	struct TrieNode *pNode = new TrieNode; 
   pNode->isEndOfWord = false; 
	for (int i = 0; i < ALPHABET_SIZE; i++) 
		pNode->children[i] = NULL; 
return pNode; 
} 

// If not present, inserts key into trie If the key is prefix of trie node, just marks leaf node 
void insert(struct TrieNode *root, string key) 
{ 
	struct TrieNode *head = root; 
for (int i = 0; i < key.length(); i++) 
	{ 
		int index = key[i] - 'a'; 
		if (!head->children[index]) 
			head>children[index] = getNode(); 

		head = head->children[index]; 
	} 

	// mark last node as leaf 
	head->isEndOfWord = true; 
} 

// Returns true if key presents in trie, else false 
bool search(struct TrieNode *root, string key) 
{ 
	struct TrieNode *head = root; 

	for (int i = 0; i < key.length(); i++) 
	{ 
		int index = key[i] - 'a'; 
		if (!head->children[index]) 
			return false; 

		head = head->children[index]; 
	} 

	return (pCrawl != NULL && pCrawl->isEndOfWord); 
} 

// returns true if string can be segmented into space separated words, otherwise returns false 
bool wordBreak(string str, TrieNode *root) 
{ 
	int size = str.size();  
	if (size == 0) return true; 
// Try all prefixes of lengths from 1 to size 
	for (int i=1; i<=size; i++) 
	{ 
		// The parameter for search is str.substr(0, i)  str.substr(0, i) which is prefix (of input  string) of length 'i'. We first check whether 
		current prefix is in dictionary. Then we recursively check for remaining string str.substr(i, size-i) which is suffix of length size-i 
		if (search(root, str.substr(0, i)) && wordBreak(str.substr(i, size-i), root)) 
			return true; 
	} 
// If we have tried all prefixes and none of them worked 
	return false; 
} 

