Input: intersectVal = 8, listA = [4,1,8,4,5], listB = [5,6,1,8,4,5]
skipA = 2, skipB = 3
Output: Reference of the node with value = 8
Input Explanation: The intersected node's value is 8 (note that this must not be 0 if the two lists intersect). From the head of A, 
it reads as [4,1,8,4,5]. From the head of B, it reads as [5,6,1,8,4,5]. There are 2 nodes before the intersected node in A; 
There are 3 nodes before the intersected node in B.

class Solution {
public: 
    
    int getLength(ListNode *head){
        
        int len = 0;
        while(head)
        {
            head=head->next;
            len++;
        }
        return len;
    }
    
    ListNode* intersectAt(int d, ListNode *headA, ListNode *headB){
        
        while(d-->0)
            headA = headA->next;
        
        while(headA && headB)
        {
            if(headA == headB)return headA;
            headA = headA->next;
            headB = headB->next;
        }
        return NULL;
    }
    
    ListNode *getIntersectionNode(ListNode *headA, ListNode *headB) {
        
        if(headA == NULL || headB == NULL)return NULL;
        ListNode *result = NULL;
        int l1 = getLength(headA);
        int l2 = getLength(headB);
        
        if(l1>l2)
            result = intersectAt(l1-l2, headA, headB);
        else
            result = intersectAt(l2-l1, headB, headA);
        return result;
    }
};

