Given a linked list where every node represents a linked list and contains two pointers of its type: 

    Pointer to next node in the main list (we call it ‘right’ pointer in the code below) 
    Pointer to a linked list where this node is headed (we call it the ‘down’ pointer in the code below). 

All linked lists are sorted. See the following example  

       5 -> 10 -> 19 -> 28
       |    |     |     |
       V    V     V     V
       7    20    22    35
       |          |     |
       V          V     V
       8          50    40
       |                |
       V                V
       30               45

Node* merge(Node* a, Node* b){
if(!a)return b;
if(!b)return a;
if(a->data <= b->data){
a->bottom = merge(a->bottom, b);
return a;
}
else{
b->bottom = merge(a, b->bottom);
return b;
}
}

Node *flatten(Node *root)
{
   // Your code here
   if(root==NULL || root->next==NULL)
   return root;
   return merge(root,flatten(root->next));
}
IN OMN CMPLEXITY 
AND O1 SPACE COMPLEXITY
