/*
Merge two sorted linked lists and return it as a new list. 
The new list should be made by splicing together the nodes of the first two lists, and should also be sorted.

For example, given following linked lists :

  5 -> 8 -> 20 
  4 -> 11 -> 15
The merged list should be :

4 -> 5 -> 8 -> 11 -> 15 -> 20
*/

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode(int x) : val(x), next(NULL) {}
 * };
 */
 /*void print(ListNode* h){
     while(h!=NULL){
         cout<<h->val<<" ";
         h=h->next;
     }
     cout<<endl;
 }
 */
ListNode* Solution::mergeTwoLists(ListNode* A, ListNode* B) {
    // Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
    ListNode *c1=A;
    ListNode *c2=B;
    ListNode *res=NULL;
    if(c1->val<=c2->val){
        res=c1;
        c1=c1->next;
        res->next=NULL;
    }
    else{
        res=c2;
         c2=c2->next;
        res->next=NULL;
    }
 //  print(res);
    ListNode *temp=res;
    while(c1!=NULL&&c2!=NULL){
       // cout<<c1->val<<" "<<c2->val<<endl;
        if(c1->val<=c2->val){
            temp->next=c1;
            c1=c1->next;
            temp=temp->next;
            temp->next=NULL;
        }
        else{
            temp->next=c2;
            c2=c2->next;
            temp=temp->next;
            temp->next=NULL;
        }
      // print(res);
    }
    if(c1==NULL&&c2!=NULL){
        temp->next=c2;
        return res;
    }
    else if(c1!=NULL&&c2==NULL){
        temp->next=c1;
        return res;
    }
    else
     return res;
}
