SIMPLE SOLUTION would be using hashing 

// Function to detect Cycle in a linked list using Hashing
bool detectCycle(Node *head)
{
	Node *curr = head;
	unordered_set<Node*> set;
// traverse the list
	while (curr)
	{
		// return false if we already have seen this node before
		if (set.find(curr) != set.end())
			return true;

		// insert current node into the set
		set.insert(curr);

		// move to the next node
		curr = curr->next;
	}

	// we reach here if list does not contain any cycle
	return false;
}


||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||\\

using two pointers

// Function to detect Cycle in a linked list using
// Floydâ€™s Cycle Detection Algorithm
bool detectCycle(Node *head)
{
	// take two pointers - slow and fast
	Node *slow = head, *fast = head;

	while (fast && fast->next)
	{
		// move slow by one pointer
		slow = slow->next;

		// move fast by two pointers
		fast = fast->next->next;

		// if they meet any any node, linked list contains a cycle
		if (slow == fast)
		   return true;
	}

	// we reach here if slow & fast pointer do not meet
	return false;
}

