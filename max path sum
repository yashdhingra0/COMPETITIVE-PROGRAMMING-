#include <bits/stdc++.h>
#include <iostream>
using namespace std;

struct Node{
    int data;
    Node *left;
    Node *right;
    Node(int data){
        this->data=data;
        this->left=this->right=NULL;
    }
};

 int maxsum(Node* root){
     if(root==NULL){
         return 0;
         }
     int l=maxsum(root->left);
     int r=maxsum(root->right);
     if(l>r){
         return l+root->data;
         
     }
     else{
         return r+root->data;
     }
 }



int main()
{
    Node* root = nullptr;
    /* Construct below tree
			  1
			/   \
		   /     \
		  2       3
		 / \     / \
		8   4   5   6
		   /   / \   \
		 10   7   9   5
    */

    root = new Node(1);
	root->left = new Node(2);
	root->right = new Node(3);
	root->left->left = new Node(8);
	root->left->right = new Node(4);
	root->right->left = new Node(5);
	root->right->right = new Node(6);
	root->left->right->left = new Node(10);
	root->right->left->left = new Node(7);
	root->right->left->right = new Node(9);
	root->right->right->right = new Node(5);

   cout<< maxsum(root);

    return 0;
}



    int solve(TreeNode* A, int &res)
    {
    if(A==NULL)
    {
    return 0;
    }

     int l=solve(A->left,res);
     int r=solve(A->right,res);
     
     int temp=max(max(l,r)+A->val,A->val);
     int ans=max(temp,l+r+A->val);
      res=max(res,ans);
     
     return temp;

    }

    int Solution::maxPathSum(TreeNode* A) {

    int res=INT_MIN;
    solve(A,res);
    return res;

    }

D
darkness.7 
