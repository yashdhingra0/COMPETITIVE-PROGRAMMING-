EXAMPLE
let the given set of intervals be {{1,3}, {2,4}, {5,7}, {6,8}}. The intervals {1,3} and {2,4} overlap with each other, so they should be merged 
and become {1, 4}. Similarly, {5, 7} and {6, 8} should be merged and become {5, 8}


ALGORITHM
1)Sort all intervals in increasing order of start time.
2) Traverse sorted intervals starting from first interval, 
   do following for every interval.
      a) If current interval is not first interval and it 
         overlaps with previous interval, then merge it with
         previous interval. Keep doing it while the interval
         overlaps with the previous one.         
      b) Else add current interval to output list of intervals.


struct Interval 
{ 
    int s, e; 
}; 
 
// Function used in sort 
bool mycomp(Interval a, Interval b) 
{ return a.s < b.s; } 
 
void mergeIntervals(Interval arr[], int n) 
{ 
    // Sort Intervals in increasing order of
    // start time
    sort(arr, arr+n, mycomp); 
 
    int index = 0; // Stores index of last element 
    // in output array (modified arr[]) 
 
    // Traverse all input Intervals 
    for (int i=1; i<n; i++) 
    { 
        // If this is not first Interval and overlaps 
        // with the previous one 
        if (arr[index].e >=  arr[i].s) 
        { 
               // Merge previous and current Intervals 
            arr[index].e = max(arr[index].e, arr[i].e); 
            arr[index].s = min(arr[index].s, arr[i].s); 
        } 
        else {
            index++;
            arr[index] = arr[i]; 
        }    
    } 
 
    // Now arr[0..index-1] stores the merged Intervals 
    cout << "\n The Merged Intervals are: "; 
    for (int i = 0; i <= index; i++) 
        cout << "[" << arr[i].s << ", " << arr[i].e << "] "; 
} 
