
Given an unsorted array of nonnegative integers, find a continuous subarray which adds to a given number. 
Input: arr[] = {1, 4, 20, 3, 10, 5}, sum = 33
Ouptut: Sum found between indexes 2 and 4
Sum of elements between indices
2 and 4 is 20 + 3 + 10 = 33

1st Approach:
A simple solution is to consider all subarrays one by one and check the sum of every subarray.
Following program implements the simple solution. Run two loops: the outer loop picks a starting point
I and the inner loop tries all subarrays starting from i.
Time Complexity: O(n^2) in worst case.
Nested loop is used to traverse the array so the time complexity is O(n^2)
Space Complexity: O(1).
As constant extra space is required.
int subArraySum(int arr[], int n, int sum) 
{ 
    int curr_sum, i, j; 
  
    // Pick a starting point 
    for (i = 0; i < n; i++) { 
        curr_sum = arr[i]; 
  
        // try all subarrays starting with 'i' 
        for (j = i + 1; j <= n; j++) { 
            if (curr_sum == sum) { 
                cout << "Sum found between indexes "
                     << i << " and " << j - 1; 
                return 1; 
            } 
            if (curr_sum > sum || j == n) 
                break; 
            curr_sum = curr_sum + arr[j]; 
        } 
    } 
  
    cout << "No subarray found"; 
    return 0; 
} 


2nd Approach ISME START AND CURR VARIABLE LENGE AGR CURR SUM GREATER THEN SUM AAGYA TO START SE REMOVE KRDENGE NH TO ADD KRTE JAYENGE
***ONLY WHEN POSITIVE INTEGERS ARE IN ARRAY
#include <iostream>
using namespace std;

 int subaray(int a[],int sum ,int n){
     int curr_sum=a[0];
     int start=0;
     int i;
     for( i=1;i<=n;i++){
         while(curr_sum>sum && start<i-1){
             curr_sum=curr_sum-a[start];
             start++;
         }   
         
         if(curr_sum==sum){
             cout<<start+1<<" "<<i<<endl;
             return 1;
         }
     if(i<n){
         curr_sum+=a[i];
     }}
     cout<<"-1"<<endl;
     return 0;
    
 }
 Complexity Analysis:

    Time Complexity : O(n).
    Only one traversal of the array is required. So the time complexity is O(n).
    Space Complexity: O(1).
    As constant extra space is required.
    
    IF NEGATIVE NUMBER ALSO EXIST IN THE ARRAY ?
    void subArraySum(int arr[], int n, int sum) 
{ 
    // create an empty map 
    unordered_map<int, int> map; 
  
    // Maintains sum of elements so far 
    int curr_sum = 0; 
  
    for (int i = 0; i < n; i++) 
    { 
        // add current element to curr_sum 
        curr_sum = curr_sum + arr[i]; 
  
        // if curr_sum is equal to target sum 
        // we found a subarray starting from index 0 
        // and ending at index i 
        if (curr_sum == sum) 
        { 
            cout << "Sum found between indexes "
                 << 0 << " to " << i << endl; 
            return; 
        } 
  
        // If curr_sum - sum already exists in map 
        // we have found a subarray with target sum 
        if (map.find(curr_sum - sum) != map.end()) 
        { 
            cout << "Sum found between indexes "
                 << map[curr_sum - sum] + 1 
                 << " to " << i << endl; 
            return; 
        } 
  
        map[curr_sum] = i; 
    } 
  
    // If we reach here, then no subarray exists 
    cout << "No subarray with given sum exists"; 
} 
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
