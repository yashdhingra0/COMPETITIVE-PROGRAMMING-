arr[] = {5, 6, 7, 8, 9, 10, 1, 2, 3};
         key = 3
Output : Found at index 8

Input  : arr[] = {5, 6, 7, 8, 9, 10, 1, 2, 3};
         key = 30
Output : Not found

Input : arr[] = {30, 40, 50, 10, 20}
        key = 10   
Output : Found at index 3

::::::::ALGORITHM:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    The idea is to find the pivot point, divide the array in two sub-arrays and perform binary search.
    The main idea for finding pivot is – for a sorted (in increasing order) and pivoted array, 
    pivot element is the only element for which next element to it is smaller than it.
    Using the above statement and binary search pivot can be found.
    After the pivot is found out divide the array in two sub-arrays.
    Now the individual sub – arrays are sorted so the element can be searched using Binary Search.




An element in a sorted array can be found in O(log n) time via binary search.
int binarySearch(int arr[], int low, 
                 int high, int key) 
{ 
    if (high < low) 
        return -1; 
  
    int mid = (low + high) / 2; /*low + (high - low)/2;*/
    if (key == arr[mid]) 
        return mid; 
  
    if (key > arr[mid]) 
        return binarySearch(arr, (mid + 1), high, key); 
  
    // else 
    return binarySearch(arr, low, (mid - 1), key); 
} 
  
/* Function to get pivot. For array 3, 4, 5, 6, 1, 2 
   it returns 3 (index of 6) */
int findPivot(int arr[], int low, int high) 
{ 
    // base cases 
    if (high < low) 
        return -1; 
    if (high == low) 
        return low; 
  
    int mid = (low + high) / 2; /*low + (high - low)/2;*/
    if (mid < high && arr[mid] > arr[mid + 1]) 
        return mid; 
  
    if (mid > low && arr[mid] < arr[mid - 1]) 
        return (mid - 1); 
  
    if (arr[low] >= arr[mid]) 
        return findPivot(arr, low, mid - 1); 
  
    return findPivot(arr, mid + 1, high); 
} 

int pivotedBinarySearch(int arr[], int n, int key) 
{ 
    int pivot = findPivot(arr, 0, n - 1); 
  
    // If we didn't find a pivot, 
    // then array is not rotated at all 
    if (pivot == -1) 
        return binarySearch(arr, 0, n - 1, key); 
  
    // If we found a pivot, then first compare with pivot 
    // and then search in two subarrays around pivot 
    if (arr[pivot] == key) 
        return pivot; 
  
    if (arr[0] <= key) 
        return binarySearch(arr, 0, pivot - 1, key); 
  
    return binarySearch(arr, pivot + 1, n - 1, key); 
} 




















