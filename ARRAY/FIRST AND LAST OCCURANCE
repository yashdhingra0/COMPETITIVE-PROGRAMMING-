Examples:

Input : arr[] = {1, 3, 5, 5, 5, 5, 67, 123, 125}    
        x = 5
Output : First Occurrence = 2
         Last Occurrence = 5

Input : arr[] = {1, 3, 5, 5, 5, 5, 7, 123, 125 }    
        x = 7
Output : First Occurrence = 6
         Last Occurrence = 6


he Naive Approach is to run a for loop and check given elements in array.

1. Run a for loop and for i = 0 to n-1
2. Take first = -1 and last = -1 
3. When we find element first time then we update first = i 
4. We always update last=i whenever we find the element.
5. We print first and last.


oid findFirstAndLast(int arr[], int n, int x) 
{ 
    int first = -1, last = -1; 
    for (int i = 0; i < n; i++) { 
        if (x != arr[i]) 
            continue; 
        if (first == -1) 
            first = i; 
        last = i; 
    } 
    if (first != -1) 
        cout << "First Occurrence = " << first 
             << "nLast Occurrence = " << last; 
    else
        cout << "Not Found"; 
} 

An Efficient solution of this problem is to use binary search.
nt first(int arr[], int low, int high, int x, int n) 
{ 
    if (high >= low) { 
        int mid = low + (high - low) / 2; 
        if ((mid == 0 || x > arr[mid - 1]) && arr[mid] == x) 
            return mid; 
        else if (x > arr[mid]) 
            return first(arr, (mid + 1), high, x, n); 
        else
            return first(arr, low, (mid - 1), x, n); 
    } 
    return -1; 
} 
  
/* if x is present in arr[] then returns the index of 
   LAST occurrence of x in arr[0..n-1], otherwise 
   returns -1 */
int last(int arr[], int low, int high, int x, int n) 
{ 
    if (high >= low) { 
        int mid = low + (high - low) / 2; 
        if ((mid == n - 1 || x < arr[mid + 1]) && arr[mid] == x) 
            return mid; 
        else if (x < arr[mid]) 
            return last(arr, low, (mid - 1), x, n); 
        else
            return last(arr, (mid + 1), high, x, n); 
    } 
    return -1; 
} 



