
MTLB ISME YE BTANA HH KI PRESENT DAY SE PHEHLE KONSA DIN THA JB STOCK KA PRICE PRESENT DAY SE JYADA THAN AND SPAN US TIME KA DIFF AND CONSECUTIVE KA BTANA HH


The stock span problem is a financial problem where we have a series of n daily price quotes for a stock and we 
need to calculate span of stock’s price for all n days.
The span Si of the stock’s price on a given day i is defined as the maximum number of consecutive days just before the given day, 
for which the price of the stock on the current day is less than or equal to its price on the given day.
For example, if an array of 7 days prices is given as {100, 80, 60, 70, 60, 75, 85}, then the span values for corresponding
7 days are {1, 1, 1, 2, 1, 4, 6}


void calculateSpan(int price[], int n, int S[])  
{  
    // Span value of first day is always 1  
    S[0] = 1;  
  
    // Calculate span value of remaining days   
    // by linearly checking previous days  
    for (int i = 1; i < n; i++)  
    {  
        S[i] = 1; // Initialize span value  
  
        // Traverse left while the next element   
        // on left is smaller than price[i]  
        for (int j = i - 1; (j >= 0) &&  
                (price[i] >= price[j]); j--)  
            S[i]++;  
    }  
}  


2ND APPROACH USING STACK 
void calculateSpan(int price[], int n, int S[]) 
{ 
    // Create a stack and push index of first 
    // element to it 
    stack<int> st; 
    st.push(0); 
  
    // Span value of first element is always 1 
    S[0] = 1; 
  
    // Calculate span values for rest of the elements 
    for (int i = 1; i < n; i++) { 
        // Pop elements from stack while stack is not 
        // empty and top of stack is smaller than 
        // price[i] 
        while (!st.empty() && price[st.top()] <= price[i]) 
            st.pop(); 
  
        // If stack becomes empty, then price[i] is 
        // greater than all elements on left of it, 
        // i.e., price[0], price[1], ..price[i-1].  Else 
        // price[i] is greater than elements after 
        // top of stack 
        S[i] = (st.empty()) ? (i + 1) : (i - st.top()); 
  
        // Push this element to stack 
        st.push(i); 
    } 
} 
