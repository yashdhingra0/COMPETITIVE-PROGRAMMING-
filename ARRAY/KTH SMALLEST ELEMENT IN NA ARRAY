/////USING MIN HEAP
#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// Function to find the K'th smallest element in the
// array using min-heap
int findKthSmallest(vector<int> const &vec, int k)
{
	// create an empty min-heap and initialize it with all elements
	// use std::greater as the comparison function for min-heap
	priority_queue<int, std::vector<int>, std::greater<>> //MIN HEAP KA SYNTAX.............
			pq(vec.begin(), vec.end());

	// pop from min-heap exactly (k-1) times
	while (--k) {
		pq.pop();
	}

	// return the root of min-heap
	return pq.top();
}

// Find K'th smallest element in an array
int main()
{
	vector<int> vec  = { 7, 4, 6, 3, 9, 1 };
	const size_t k = 3;

	cout << "K'th smallest element in the array is " <<
			findKthSmallest(vec, k);

	return 0;
}
COMPLEXITY IS O(N+KLOGN)



USING MAX HEAP  



#include <iostream>
#include <vector>
#include <queue>
using namespace std;

// Function to find the K'th smallest element in the
// array using max-heap
int findKthSmallest(vector<int> const &v, int k)
{
	// create a max-heap using std::priority_queue and
	// insert first k elements of the array into the heap
	priority_queue<int, vector<int>> pq(v.begin(), v.begin() + k);

	// do for remaining array elements
	for (int i = k; i < v.size(); i++)
	{
		// if current element is less than the root of the heap
		if (v[i] < pq.top())
		{
			// replace root with the current element
			pq.pop();
			pq.push(v[i]);
		}
	}

	// return the root of max-heap
	return pq.top();
}

// Find K'th smallest element in an array
int main()
{
	vector<int> vec  = { 7, 4, 6, 3, 9, 1 };
	const size_t k = 3;

	cout << "K'th smallest element in the array is " <<
			findKthSmallest(vec, k);

	return 0;
}

O(NLOGK)
