bool iscycleDFS(vector<vector<int> > &Graph,vector<bool> &visited,int index,int parent)
{
    visited[index] = true;
    for(int i=0;i<Graph[index].size();i++)
    {
        int t = Graph[index][i];
        if(!visited[t])
        {
            if(iscycleDFS(Graph,visited,t,index))
              return true;
        }
        else if(parent != t)
           return true;
    }
    visited[index] = false;
    return false;
}


int Solution::solve(int V, vector<vector<int> > &B) {
    int E = B.size();
    vector<vector<int> > Graph(V+1);
    vector<bool> visited(V+1,false);
    for(int i=0;i<E;i++)
    {
        Graph[B[i][0]].push_back(B[i][1]);
        Graph[B[i][1]].push_back(B[i][0]);    
    }
   
    
    for(int i=1;i<=E;i++)
    {
       if(iscycleDFS(Graph,visited,i,-1))
         return true;
    }
    return false;
}
