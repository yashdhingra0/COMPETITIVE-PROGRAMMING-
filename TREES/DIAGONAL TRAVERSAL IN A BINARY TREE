#include <iostream>
#include <vector>
#include <unordered_map>
using namespace std;

// Data structure to store a Binary Tree node
struct Node
{
	int data;
	Node *left, *right;

	Node(int data)
	{
		this->data = data;
		this->left = this->right = nullptr;
	}
};

// Recursive function to do a pre-order traversal of the tree and
// fill the map with diagonal elements
void printDiagonal(Node *node, int diagonal, auto &map)
{
	// base case: empty tree
	if (node == nullptr)
		return;

	// insert current node in current diagonal
	map[diagonal].push_back(node->data);

	// recur for left subtree by increasing diagonal by 1
	printDiagonal(node->left, diagonal + 1, map);

	// recur for right subtree with same diagonal
	printDiagonal(node->right, diagonal, map);
}

// Function to print the diagonal elements of given binary tree
void printDiagonal(Node *root)
{
	// create an empty map to store diagonal element in every slope
	unordered_map<int, vector<int>> map;

	// do pre-order traversal of the tree and fill the map
	printDiagonal(root, 0, map);

	// traverse the map and print diagonal elements
	int temp = 0;

	for (int i = 0; i < map.size(); i++)
	{
		for (int i: map[i]) {
			cout << i << ' ';
		}

		cout << endl;
	}
}

int main()
{
	/* Construct below tree
			  1
			/   \
		   /     \
		  2       3
		 /      /  \
		/      /    \
	   4      5      6
			 / \
			/   \
		   7     8
	*/

	Node* root = new Node(1);
	root->left = new Node(2);
	root->right = new Node(3);
	root->left->left = new Node(4);
	root->right->left = new Node(5);
	root->right->right = new Node(6);
	root->right->left->left = new Node(7);
	root->right->left->right = new Node(8);

	printDiagonal(root);

	return 0;
}

OUTPUT 
1 3 6 
2 5 8 
4 7








