struct node *constructTreeUtil(int pre[], char preLN[], int *index_ptr, int n) 
{  // store the current value of index in pre[
    int index = *index_ptr;] 
 // Base Case: All nodes are constructed 
    if (index == n) 
        return NULL; 
  
    // Allocate memory for this node and increment index for 
    // subsequent recursive calls 
    struct node *temp = newNode ( pre[index] ); 
    (*index_ptr)++; 
  
    // If this is an internal node, construct left and right subtrees and link the subtrees 
    if (preLN[index] == 'N') 
    { 
      temp->left  = constructTreeUtil(pre, preLN, index_ptr, n); 
      temp->right = constructTreeUtil(pre, preLN, index_ptr, n); 
    } 
  
    return temp; 
} 
  
// A wrapper over constructTreeUtil() 
struct node *constructTree(int pre[], char preLN[], int n) 
{ int index = 0; 
return constructTreeUtil (pre, preLN, &index, n); 
} 
