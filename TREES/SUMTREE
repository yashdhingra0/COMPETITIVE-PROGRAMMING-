int toSumTree(node *Node)  
{  
    // Base case  
    if(Node == NULL)  
    return 0;  
  
    // Store the old value  
    int old_val = Node->data;  
  
    // Recursively call for left and 
    // right subtrees and store the sum as  
    // new value of this node  
    Node->data = toSumTree(Node->left) + toSumTree(Node->right);  
  
    // Return the sum of values of nodes 
    // in left and right subtrees and  
    // old_value of this node  
    return Node->data + old_val;  
}  


check if a tree is a sum tree or not 

int sum(Node* root)
{
if ( root == NULL)
return 0;
if ( root-> left==NULL && root-> right==NULL)
return root-> data;
return sum(root-> left)+sum(root->right)+root-> data;
}
bool isSumTree(Node* root)
{
if ( root == NULL)
return true;
if ( root-> left == NULL && root -> right == NULL)
return true;
return (root-> data == sum(root-> left) + sum(root-> right)) && isSumTree(root->left) && isSumTree(root->right);
}
