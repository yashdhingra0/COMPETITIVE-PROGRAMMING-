
1ST APPROACH MM CHECK KR RHE HN KI AGR LEFT SUBTREE AND RIGHT SUBTREE MM HRR NODE BST FOLLOR KR RHI HH YA NHI COMPLEXITY HH O N2 AND SPACE WALO 0H HEIGHT
// Recursive function to calculate the size of a given binary tree
int size(Node* root)
{
	// base case: empty tree has size 0
	if (root == nullptr)
		return 0;

	// recursively calculate the size of left and right subtrees and
	// return sum of size of left and right subtrees + 1 (for root node)
	return size(root->left) + 1 + size(root->right);
}

// Recursive function to determine if given Binary Tree is a BST or not
// by keeping a valid range (starting from [MIN_VALUE, MAX_VALUE]) and
// keep shrinking it down for each node as we go down recursively
bool isBST(Node* node, int min, int max)||||||||||||||||||||**************|||||||||||||||||||||||||||||||||||||||
{                                                                                  /////////////////////////////
	// base case                                                                      /////////////////////////////
	if (node == nullptr)
		return true;
// if node's value fall outside valid range
	if (node->data < min || node->data > max)
		return false;
    // recursively check left and right subtrees with updated range
	return isBST(node->left, min, node->data) &&
		   isBST(node->right, node->data, max);
}

// Recursive function to find the size of the largest BST in a given binary tree
int findLargestBST(Node* root)
{
	if (isBST(root, INT_MIN, INT_MAX))
		return size(root);
return max(findLargestBST(root->left), findLargestBST(root->right));
}

			  10
			/	\
		   /	  \
		  15	   8
		 / \	  / \
		/   \	/   \
	   12   20  5	 2
	*/
OUTPUT 3


|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||







