#include<iostream>
using namespace std;
struct  Node{
	Node* left;
	Node* right;
	int data;
};

class BinaryTree{
private:
	Node* root;
public:	
	BinaryTree():root(NULL){};
	bool isEmpty(){
		return(root==NULL);
	}
	void insert(int item)	{
		Node* newbie = new Node();
		Node* parent = NULL;
		newbie->left = NULL;
		newbie->right= NULL;
		newbie->data = item;
		if(isEmpty()){
			root = newbie;
		}
		else{
			Node* ptr = root;
			while(ptr != NULL){
					parent = ptr;
					if(item > ptr->data){
						ptr = ptr->right;
					}
					else if(item < ptr->data){
						ptr = ptr->left;
					}
					else
						cout << "This object already exists in the tree!"<< endl;
				}
			
			//now ptr can tell me where to put the newbie
			if(item > parent->data ){			//put on the right
				parent->right = newbie;
			}
			else if(item < parent->data ){				//put on the left
				parent->left = newbie;
			}
		}
	}
	Node* getRoot(){
		return root;
	}
	void inorder(Node* root){
		if(root != NULL){
		inorder(root->left);
		cout << root->data << " ";
		inorder(root->right);
		}
	}
	void postorder(Node* root){
		if(root != NULL){
		postorder(root->left);
		postorder(root->right);
		cout << root->data << " ";
		}
	}
	void preorder(Node* root){
		if(root != NULL){
		cout << root->data << " ";
		preorder(root->left);
		preorder(root->right);
		}
	}
};

int main(){
	
        BinaryTree tree;
	tree.insert(5);
	tree.insert(3);
	tree.insert(9);
	tree.insert(1);
	tree.insert(4);
	tree.insert(6);
	tree.insert(15);
	tree.inorder(tree.getRoot());
	cout << endl;
	tree.postorder(tree.getRoot());
	cout << endl;
	tree.preorder(tree.getRoot());

	system("PAUSE");
}
