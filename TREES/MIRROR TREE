Mirrotree(NODE* root){ // call left subtree and right subtree and then swap right and left pointers 
if(root==null)
return ;
else{
mirror(root->left);
mirror(root->right);
node* temp;
temp=root->left;//swapping 
root->left=root->right;
root->right=temp;}}

inorder(node* node)
inorder(root->left);
cout<<rott->data;
inorder(root->right);


2nd approach is queue based 
Mirrotree(NODE* root){ // call left subtree and right subtree and then swap right and left pointers 
if(root==null)
return ;
queue<node*>q;

queue<Node*> q; 
    q.push(root); 
  
    // Do BFS. While doing BFS, keep swapping 
    // left and right children 
    while (!q.empty()) 
    { 
        // pop top node from queue 
        Node* curr = q.front(); 
        q.pop(); 
  
        // swap left child with right child 
        swap(curr->left, curr->right); 
  
        // push left and right children 
        if (curr->left) 
            q.push(curr->left); 
        if (curr->right) 
            q.push(curr->right); 
    } 
} 
inorder(node* node)
inorder(root->left);
cout<<rott->data;
inorder(root->right);


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
















bool isMirror(struct Node *root1, struct Node *root2) 
{ 
    // If both trees are emptu, then they are mirror images 
    if (root1 == NULL && root2 == NULL) 
        return true; 
  
    // For two trees to be mirror images, the following three 
    // conditions must be true 
    // 1 - Their root node's key must be same 
    // 2 - left subtree of left tree and right subtree 
    //      of right tree have to be mirror images 
    // 3 - right subtree of left tree and left subtree 
    //      of right tree have to be mirror images 
    if (root1 && root2 && root1->key == root2->key) 
        return isMirror(root1->left, root2->right) && 
               isMirror(root1->right, root2->left); 
  
    // if neither of above conditions is true then root1 
    // and root2 are not mirror images 
    return false; 
} 
  
// Returns true if a tree is symmetric i.e. mirror image of itself 
bool isSymmetric(struct Node* root) 
{ 
    // Check if tree is mirror of itself 
    return isMirror(root, root); 
} 
