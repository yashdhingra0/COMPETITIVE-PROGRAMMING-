 itterative approach
// Iterative function to print left view of given binary tree
void leftView(Node* root)
{
	// return if tree is empty
	if (root == nullptr)
		return;

	// create an empty queue and enqueue root node
	list<Node*> queue;
	queue.push_back(root);

	// pointer to store current node
	Node* curr = nullptr;

	// loop till queue is empty
	while (!queue.empty())
	{
		// calculate number of nodes in current level
		int size = queue.size();
		int i = 0;

		// process every node of current level and enqueue their
		// non-empty left and right child to queue
		while (i++ < size)
		{
		   curr = queue.front();
		   queue.pop_front();

		   // if this is first node of current level, print it
		   if (i == 1)
				cout << curr->key << " ";

		   if (curr->left)
				queue.push_back(curr->left);

		   if (curr->right)
				queue.push_back(curr->right);
		}
	}
}



Recursive using map
// traverse nodes in pre-order fashion
void leftView(Node *root, int level, auto &map)
{
	if (root == nullptr)
		return;

	// if level is visited for the first time, insert the current node
	// and level information into the map
	if (map.find(level) == map.end())
		map[level] = root->key;

	leftView(root->left, level + 1, map);
	leftView(root->right, level + 1, map);
}

// Function to print left view of given binary tree
int leftView(Node *root)
{
	// create an empty map to store first node for each level
	unordered_map<int, int> map;

	// traverse the tree and fill map
	leftView(root, 1, map);

	// iterate through the map and print left view
	for (int i = 1; i <= map.size(); i++)
		cout << map[i] << " ";
}

