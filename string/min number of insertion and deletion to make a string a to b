example heap se pea bnane mm kitne insertion krne hn?
so ans is phehle to hmm heap ki length mm se lcs of dono string ka minus kr denge to vo no of deletion dedega baad mm jo string bchegi usme 
insertion add krne hn vo nikalenge b string and bcchi hui string ka lcs nikal kr fir vo lcs b string se minus krdenge and final count return krdenge

-->str1 and str2 be the given strings.
-->m and n be their lengths respectively.
-->len be the length of the longest 
   common subsequence of str1 and str2
-->// minimum number of deletions 
   minDel = m - len
-->// minimum number of Insertions 
   minInsert = n - len
   
   int lcs(string str1, string str2, int m, int n ) //lcs nikalne ka code 
{ 
   int L[m+1][n+1]; 
   int i, j; 
    
   // Following steps build L[m+1][n+1] in bottom 
   // up fashion. Note that L[i][j] contains  
   // length of LCS of str1[0..i-1] and str2[0..j-1]  
   for (i=0; i<=m; i++) 
   { 
     for (j=0; j<=n; j++) 
     { 
       if (i == 0 || j == 0) 
         L[i][j] = 0; 
    
       else if (str1.at(i-1) == str2.at(j-1)) 
         L[i][j] = L[i-1][j-1] + 1; 
    
       else
         L[i][j] = max(L[i-1][j], L[i][j-1]); 
     } 
   } 
      
   // L[m][n] contains length of LCS  
   // for X[0..n-1] and Y[0..m-1]  
   return L[m][n]; 
} 


void printMinDelAndInsert(string str1, string str2)   
{ 
    int m = str1.size(); 
    int n = str2.size(); 
      
    int len = lcs(str1, str2, m, n); 
      
    cout << "Minimum number of deletions = "
         << (m - len) << endl; 
        
    cout << "Minimum number of insertions = "   
         << (n - len) << endl;   
} 














    
