
////////////////////////////////////////////////////////////using recursion/////////////////////////////////////////////////////////
int lcs(string x,string y ,int n,int m){
if(n==0||m==0){
return 0;}
if(x[n-1]==y[m-1]){
return 1+lcs(x,y,n-1,m-1);}
else{
return max(lcs(x,y,n-1,m),lcs(x,y,n,m-1);}
}



//////////////////////////////////////////////////////using dp (recursion + memoization) ////////////////////////////////////////////////////////////////////
int t[1001][1001];
int lcs(string x,string y ,int n,int m){
memset(t,-1,sizeof(t));
if(n==0||m==0){
return 0;}
if(t[m][n]!=-1){
return t[m][n];}
if(x[n-1]==y[m-1]){
return t[m][n]=1+lcs(x,y,n-1,m-1);} // 1 add kiya kyunki agr dono character match hogyee to vo subsequence mm add hogi pkka

else{
return t[m][n]=max(lcs(x,y,n-1,m),lcs(x,y,n,m-1);}
}

als0 print it ///////////////////////////////////////////////////////////////////////////////////////////////////
phehle table bnake store krwa lo
i=m ,j=n;
while(i>0 && j>0){
if(a[i-1]==b[j-1])
s.push_back(a[i,j])
i--;j--;
else
if(t[i-1][j]>t[i][j-1])
i--;
else
j--;}
reverse krdo ab string ko 
return s;

