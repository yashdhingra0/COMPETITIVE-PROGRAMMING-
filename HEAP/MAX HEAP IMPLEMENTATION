#include<bits/stdc++.h>
using namespace std;
struct PriorityQueue 
{
private:
	vector<int> A;
	int PARENT(int i) {return (i - 1) / 2; }
    int LEFT(int i) {return (2 * i + 1); }
    int RIGHT(int i) {return (2 * i + 2); }
|||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
    void heapify(int i)
	{
		// get left and right child of node at index i
		int left = LEFT(i);
		int right = RIGHT(i);

		int largest = i;

		// compare A[i] with its left and right child
		// and find largest value
		if (left < size() && A[left] > A[i])
			largest = left;

		if (right < size() && A[right] > A[largest])
			largest = right;

		// swap with child having greater value and 
		// call heapify-down on the child
		if (largest != i) {
			swap(A[i], A[largest]);
			heapify(largest);
		}
	}
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	// Recursive Heapify-up algorithm
	void heapify_up(int i)
	{
		// check if node at index i and its parent violates 
		// the heap property
		if (i && A[PARENT(i)] < A[i]) 
		{
			// swap the two if heap property is violated
			swap(A[i], A[PARENT(i)]);
			
			// call Heapify-up on the parent
			heapify_up(PARENT(i));
		}
	}
	
public:
	unsigned int size(){return A.size();}
	bool empty(){return size() == 0;}
  |||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	void push(int key)
	{A.push_back(key);

		// get element index and call heapify-up procedure
		int index = size() - 1;
		heapify_up(index);
	}
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	// function to remove element with highest priority (present at root)
	void pop()
    {
	if (size() == 0)
	cout<<"index is out of range(Heap underflow)"<<endl;
        else
            
    // replace the root of the heap with the last element
			// of the vector
			A[0] = A.back();
			A.pop_back();
    // call heapify-down on root node
	heapify(0);
		}
		// catch and print the exception
		catch (const out_of_range& oor) {
			cout << "\n" << oor.what();
		}
	}
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||
	int top()
	{
      if (size() == 0)
	cout<<"index is out of range(Heap underflow)"<<endl;
     else
     return A[0];	// or return A[0];
		}};
||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||||		

// Max Heap C++ implementation
int main()
{
	PriorityQueue pq;
	pq.push(3);
	pq.push(2);
	pq.push(15);
	cout << "Size is " << pq.size() << endl;	
	cout << pq.top() << " ";
	pq.pop();
  cout << pq.top() << " ";
	pq.pop();
  pq.push(5);
	pq.push(4);
	pq.push(45);
  cout << endl << "Size is " << pq.size() << endl;
	cout << pq.top() << " ";
	pq.pop();
  cout << pq.top() << " ";
	pq.pop();
  cout << pq.top() << " ";
	pq.pop();
  cout << pq.top() << " ";
	pq.pop();
  return 0;
}

OUTPUT
Size is 3
15 3 
Size is 4
45 5 4 2 
